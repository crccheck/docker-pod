#!/usr/bin/env bash
#
# Helper to manage repetitive syntax of git subtrees.
#
# git remotes and directories must have the same name
#
# requires bash 4, see http://www.artificialworlds.net/blog/2012/10/17/bash-associative-array-examples/

# set -e

declare -A REMOTES
REMOTES=(
  [graphite]=git@github.com:crccheck/docker-graphite.git
  [mysql]=git@github.com:crccheck/docker-mysql.git
  [postgis]=git@github.com:crccheck/docker-postgis.git
  [tor]=git@github.com:crccheck/docker-tor.git
  [zz]=git@github.com:crccheck/docker-zz.git
)

# Print help
# Trying to conform to http://docopt.org/
function help() {
  echo "Usage:"
  echo "  ./subtree remotes"
  echo "  ./subtree (init|pull|push) <name> [options]"
  echo ""
  echo "Commands:"
  echo "  remotes  Add all git remotes"
  echo "  init     Initialize a subtree from <name>'s remote"
  echo "  pull     Pull in commits from <name>'s remote"
  echo "  push     Push up commits to <name>'s remote"
  echo ""
  echo "Any options you specify pass through to \`git subtree\`"
}

# Make sure a subtree name was specified as an argument.

function check_name() {
  if [ -z $2 ]; then
    echo "Must enter a name \"pull <name>\""
    exit 1
  fi
}

case "$1" in

  help)
    help
    ;;

  # add all remotes
  remotes)
    echo "Adding remotes for other docker images"
    # bash 3 friendly associative array http://stackoverflow.com/a/4444841
    for name in "${!REMOTES[@]}"; do
      remote=${REMOTES[$name]}
      echo -en "  $name\t$remote\t"
      git remote add $name $remote 2> /dev/null
      if [ $? -eq 0 ]; then
        echo "[added]"
      else
        echo "[skipped]"
      fi
    done
    ;;

  # initialize a subtree from an existing remote
  init)
    git subtree add --prefix=$2 $2 master
    ;;

  # pull
  pull)
    check_name $*
    git subtree pull --prefix=$2 $2 master
    ;;

  # push
  push)
    check_name $*
    git subtree push --prefix=$2 $2 master
    ;;

  *)
    help
    ;;

esac
